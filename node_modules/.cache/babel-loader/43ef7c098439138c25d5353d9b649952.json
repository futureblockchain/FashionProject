{"ast":null,"code":"/**\n * @remix-run/router v1.6.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n      return param;\n    } // Remove any optional markers from optional static segments\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n}); //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\"; // Config driven behavior flags\n\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission.\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n    if (state.initialized && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n    let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location,\n    // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n  let submission;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired\n    }));\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","map":{"version":3,"sources":["../history.ts","../utils.ts","../router.ts"],"names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","array","isLastSegment","star","starParam","keyMatch","optional","param","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","deferredKeys","constructor","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","fetcherSubmission","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","abortPendingFetchRevalidations","f","abortFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","getFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","find","values","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","toUpperCase","stripHashFromPath","searchParams","convertFormDataToSearchParams","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","isStaticRequest","resultType","onReject","runHandler","handler","protocol","isSameBasename","contentType","text","isDeferredData","deferred","body","URLSearchParams","File","name","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","errorMessage","obj","signals","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n  MapRoutePropertiesFunction,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\ntype BaseNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  fromRouteId?: string;\n};\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission.\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      state.initialized &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}