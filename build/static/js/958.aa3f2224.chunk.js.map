{"version":3,"file":"static/js/958.aa3f2224.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.tsx","components/form-input/form-input.styles.tsx","components/form-input/form-input.component.tsx","components/sign-up-form/sign-up-form.styles.tsx","components/sign-up-form/sign-up-form.component.tsx","components/sign-in-form/sign-in-form.styles.tsx","components/sign-in-form/sign-in-form.component.tsx","routes/authentication/authentication.styles.tsx","routes/authentication/authentication.component.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import React, { FC, ButtonHTMLAttributes } from 'react';\nimport {\n  BaseButton,\n  GoogleSignInButton,\n  InvertedButton,\n  ButtonSpinner,\n} from './button.styles';\n\nexport enum BUTTON_TYPE_CLASSES {\n  Base = 'base',\n  Google = 'google-sign-in',\n  Inverted = 'inverted',\n}\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.Base) => {\n  const buttonMap = {\n    [BUTTON_TYPE_CLASSES.Base]: BaseButton,\n    [BUTTON_TYPE_CLASSES.Google]: GoogleSignInButton,\n    [BUTTON_TYPE_CLASSES.Inverted]: InvertedButton,\n  };\n\n  return buttonMap[buttonType];\n};\n\ntype ButtonProps = {\n  buttonType?: BUTTON_TYPE_CLASSES;\n  isLoading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst Button: FC<ButtonProps> = ({\n  children,\n  buttonType,\n  isLoading,\n  ...otherProps\n}) => {\n  const CustomButton = getButton(buttonType);\n  return (\n    <CustomButton disabled={isLoading} {...otherProps}>\n      {isLoading ? <ButtonSpinner /> : children}\n    </CustomButton>\n  );\n};\n\nexport default Button;","import styled from 'styled-components';\n\nimport { SpinnerContainer } from '../spinner/spinner.styles';\n\nexport const BaseButton = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: 'Open Sans Condensed';\n  font-weight: bolder;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\nBaseButton.displayName = 'BaseButton';\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    border: none;\n  }\n`;\n\nGoogleSignInButton.displayName = 'GoogleSignInButton';\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`;\n\nInvertedButton.displayName = 'InvertedButton';\n\nexport const ButtonSpinner = styled(SpinnerContainer)`\n  width: 30px;\n  height: 30px;\n`;\n\nButtonSpinner.displayName = 'ButtonSpinner';\n","import styled, { css } from 'styled-components';\n\nconst subColor = 'grey';\nconst mainColor = 'black';\n\nconst shrinkLabelStyles = css`\n  top: -14px;\n  font-size: 12px;\n  color: ${mainColor};\n`;\n\ntype FormInputLabelProps = {\n  shrink?: boolean;\n};\n\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\n  color: ${subColor};\n  font-size: 16px;\n  font-weight: normal;\n  position: absolute;\n  pointer-events: none;\n  left: 5px;\n  top: 10px;\n  transition: 300ms ease all;\n  ${({ shrink }) => shrink && shrinkLabelStyles};\n`;\n\nexport const Input = styled.input`\n  background: none;\n  background-color: white;\n  color: ${subColor};\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  display: block;\n  width: 100%;\n  border: none;\n  border-radius: 0;\n  border-bottom: 1px solid ${subColor};\n  margin: 25px 0;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:focus ~ ${FormInputLabel} {\n    ${shrinkLabelStyles};\n  }\n`;\n\nexport const Group = styled.div`\n  position: relative;\n  margin: 45px 0;\n\n  input[type='password'] {\n    letter-spacing: 0.3em;\n  }\n`;\n","import { InputHTMLAttributes, FC } from 'react';\n\nimport { FormInputLabel, Input, Group } from './form-input.styles';\n\ntype FormInputProps = { label: string } & InputHTMLAttributes<HTMLInputElement>;\n\nconst FormInput: FC<FormInputProps> = ({ label, ...otherProps }) => {\n  return (\n    <Group>\n      <Input {...otherProps} />\n      {label && (\n        <FormInputLabel\n          shrink={Boolean(\n            otherProps.value &&\n              typeof otherProps.value === 'string' &&\n              otherProps.value.length\n          )}\n        >\n          {label}\n        </FormInputLabel>\n      )}\n    </Group>\n  );\n};\n\nexport default FormInput;\n","import styled from 'styled-components';\n\nexport const SignUpContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 380px;\n\n  h2 {\n    margin: 10px 0;\n  }\n`;\n","import { useState, FormEvent, ChangeEvent } from 'react';\nimport { AuthError, AuthErrorCodes } from 'firebase/auth';\nimport { useDispatch } from 'react-redux';\n\nimport FormInput from '../form-input/form-input.component';\nimport Button from '../button/button.component';\n\nimport { SignUpContainer } from './sign-up-form.styles';\nimport { signUpStart } from '../../store/user/user.action';\n\nconst defaultFormFields = {\n  displayName: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nconst SignUpForm = () => {\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { displayName, email, password, confirmPassword } = formFields;\n  const dispatch = useDispatch();\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert('passwords do not match');\n      return;\n    }\n\n    try {\n      dispatch(signUpStart(email, password, displayName));\n      resetFormFields();\n    } catch (error) {\n      if ((error as AuthError).code === AuthErrorCodes.EMAIL_EXISTS) {\n        alert('Cannot create user, email already in use');\n      } else {\n        console.log('user creation encountered an error', error);\n      }\n    }\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  return (\n    <SignUpContainer>\n      <h2>Don't have an account?</h2>\n      <span>Sign up with your email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput\n          label='Display Name'\n          type='text'\n          required\n          onChange={handleChange}\n          name='displayName'\n          value={displayName}\n        />\n\n        <FormInput\n          label='Email'\n          type='email'\n          required\n          onChange={handleChange}\n          name='email'\n          value={email}\n        />\n\n        <FormInput\n          label='Password'\n          type='password'\n          required\n          onChange={handleChange}\n          name='password'\n          value={password}\n        />\n\n        <FormInput\n          label='Confirm Password'\n          type='password'\n          required\n          onChange={handleChange}\n          name='confirmPassword'\n          value={confirmPassword}\n        />\n        <Button type='submit'>Sign Up</Button>\n      </form>\n    </SignUpContainer>\n  );\n};\n\nexport default SignUpForm;\n","import styled from 'styled-components';\n\nexport const SignInContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 380px;\n\n  h2 {\n    margin: 10px 0;\n  }\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n","import { useState, FormEvent, ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport FormInput from '../form-input/form-input.component';\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\n\nimport { SignInContainer, ButtonsContainer } from './sign-in-form.styles';\nimport {\n  googleSignInStart,\n  emailSignInStart,\n} from '../../store/user/user.action';\n\nconst defaultFormFields = {\n  email: '',\n  password: '',\n};\n\nconst SignInForm = () => {\n  const dispatch = useDispatch();\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { email, password } = formFields;\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const signInWithGoogle = async () => {\n    dispatch(googleSignInStart());\n  };\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    try {\n      dispatch(emailSignInStart(email, password));\n      resetFormFields();\n    } catch (error) {\n      console.log('user sign in failed', error);\n    }\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  return (\n    <SignInContainer>\n      <h2>Already have an account?</h2>\n      <span>Sign in with your email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput\n          label='Email'\n          type='email'\n          required\n          onChange={handleChange}\n          name='email'\n          value={email}\n        />\n\n        <FormInput\n          label='Password'\n          type='password'\n          required\n          onChange={handleChange}\n          name='password'\n          value={password}\n        />\n        <ButtonsContainer>\n          <Button type='submit'>Sign In</Button>\n          <Button\n            buttonType={BUTTON_TYPE_CLASSES.Google} // Update the value here\n            type='button'\n            onClick={signInWithGoogle}\n          >\n            Sign In With Google\n          </Button>\n        </ButtonsContainer>\n      </form>\n    </SignInContainer>\n  );\n};\n\nexport default SignInForm;","import styled from 'styled-components';\n\nexport const AuthenticationContainer = styled.div`\n  display: flex;\n  width: 900px;\n  justify-content: space-between;\n  margin: 30px auto;\n`;\n","import SignUpForm from '../../components/sign-up-form/sign-up-form.component';\nimport SignInForm from '../../components/sign-in-form/sign-in-form.component';\n\nimport { AuthenticationContainer } from './authentication.styles';\n\nconst Authentication = () => {\n  return (\n    <AuthenticationContainer>\n      <SignInForm />\n      <SignUpForm />\n    </AuthenticationContainer>\n  );\n};\n\nexport default Authentication;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["BUTTON_TYPE_CLASSES","_ref","children","buttonType","isLoading","otherProps","_objectWithoutProperties","_excluded","CustomButton","_buttonMap","arguments","length","undefined","Base","_defineProperty","BaseButton","Google","GoogleSignInButton","Inverted","InvertedButton","getButton","_jsx","_objectSpread","disabled","ButtonSpinner","styled","_templateObject","_taggedTemplateLiteral","displayName","_templateObject2","_templateObject3","SpinnerContainer","_templateObject4","subColor","shrinkLabelStyles","css","FormInputLabel","shrink","Input","Group","label","_jsxs","Boolean","value","SignUpContainer","defaultFormFields","email","password","confirmPassword","_useState","useState","_useState2","_slicedToArray","formFields","setFormFields","dispatch","useDispatch","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","preventDefault","alert","abrupt","signUpStart","error","code","AuthErrorCodes","console","log","stop","_x","apply","handleChange","_event$target","target","name","onSubmit","FormInput","type","required","onChange","Button","SignInContainer","ButtonsContainer","signInWithGoogle","googleSignInStart","_ref2","_callee2","_context2","emailSignInStart","onClick","AuthenticationContainer","SignInForm","SignUpForm","source","excluded","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}